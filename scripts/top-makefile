##############################################################################
#
# Neuros OSD top level Makefile
# origin: build-tools/scripts/top-makefile
#
##############################################################################

ifndef PRJROOT
    $(error You must first source the BSP environment: "source neuros-env")
endif

QT_NWM := nwm
QT_PHOTO := photoalbum
QT_MENU := mainmenu
QT_APPS     := $(QT_NWM) $(QT_MENU) $(QT_PHOTO)

KERNEL_DIR := linux-davinci-2.6

.PHONY: config menuconfig oldconfig silentoldconfig defconfig

help:
	@echo ""
	@echo "-- Build the entire system"
	@echo "   1. make [X]_defconfig     # default config"
	@echo "   1.1 make menuconfig       # further config BSP if needed (usually not)."
	@echo "   2. make all               # make Kernel and modules and the entire system."
	@echo "   3. make install           # this will install and create various images."
	@echo "   4. make clean             # this will clean everything, except built images."
	@echo ""
	@echo "-- Available configs (platforms that Neuros maintains)"
	@echo "   1. ntosd_644xA_defconfig  # Neuros dm6446 OSD revision A hardware."
	@echo ""

# Mark off the all
all: u-boot linux busybox external-components qt-plugins applications qt-applications

config menuconfig oldconfig silentoldconfig defconfig %_defconfig:
# Configure Neuros BSP
#	@$(MAKE) -C scripts/kconfig $@
# Configure Linux Kernel
	make -C $(KERNEL_DIR) $@
# busybox config
#	@$(MAKE) -C sysapps/busybox $@

.PHONY: u-boot linux busybox binary-components external-components qt-plugins vlc

u-boot:
ifeq (u-boot/include/config.mk,$(wildcard u-boot/include/config.mk))
	@$(MAKE) --no-print-dir -C u-boot
else
	@$(MAKE) --no-print-dir -C u-boot davinci_ntosd_644xA_config
	@$(MAKE) --no-print-dir -C u-boot
endif	
linux:
	@$(MAKE) --no-print-directory -C $(KERNEL_DIR) ntosd_644xA_defconfig
	@$(MAKE) --no-print-directory -C $(KERNEL_DIR) uImage
	@$(MAKE) --no-print-directory -C $(KERNEL_DIR) modules
busybox:
	@$(MAKE) --no-print-directory -C busybox all

applications:
	@$(MAKE) --no-print-directory -C applications/app-demos

external-components:
	@$(MAKE) --no-print-directory -C external-components

qt-plugins:
	@$(MAKE) --no-print-directory -C qt-plugins all

install:
	@echo "Installing u-boot"
	@$(MAKE) --no-print-directory -C u-boot install
	@echo "Installing kernel image"
	@$(MAKE) --no-print-directory -C $(KERNEL_DIR) install
	@mkimage -A arm -O linux -T script -C none	\
		-a 0 -e 0 -n "autoscr script"		\
		-d build-tools/scripts/ntosd_default_env.ascr \
		images/default_env.img > /dev/null
	@echo "Installing base rootfs."
	@$(MAKE) -C rootfs $@
	@echo "Installing kernel modules."
	@$(MAKE) --no-print-directory -C $(KERNEL_DIR) modules_install
	@echo "Installing busybox."
	@$(MAKE) --no-print-directory -C busybox install
	@$(MAKE) --no-print-directory -C build-tools/yaffs-tools install
	@$(MAKE) --no-print-directory -C external-components install
	@$(MAKE) --no-print-directory -C qt-plugins install
	@$(MAKE) --no-print-directory -C applications/app-demos install

	# Qt application install. This is because qmake works different than plan make
	@for dir in  $(QT_APPS); do \
		${NQMAKE} -recursive -nocache applications/app-$$dir/$$dir.pro && \
		make -C applications/app-$$dir install || exit 1 ;\
	done;

	@./images/build_pkg


qt-applications:

	@for dir in  $(QT_APPS); do \
		${NQMAKE} -recursive -nocache applications/app-$$dir/$$dir.pro && \
		make -C applications/app-$$dir all || exit 1 ;\
	done;



binary-components:
	@${MAKE} -C binary-components install

# This is a temporary solution until we get a better way to build VLC
# and dependencies. It's not part of the "all" build target for now.
vlc: binary-components
	build-tools/scripts/vlc-build-helper.sh
	

.PHONY: clean help
clean:
	make -C u-boot mrproper
	make -C $(KERNEL_DIR) mrproper
	make -C busybox cleanall

	@rm -f *~
